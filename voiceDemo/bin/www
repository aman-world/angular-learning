#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');
var WebSocketServer = require('ws').Server;
var url = require('url');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


wss = new WebSocketServer({server: server}, function () {
    console.log("WebSocket server is created ...");
});

wss.on('connection', function connection(ws) {
    var request = ws.upgradeReq;
    console.log("url: ", request.url);
    ws.binaryType = "arraybuffer";
    var audioBuffer = new Buffer(0);

    ws.on('open', function() {
        console.log('connection opened');
    });

    // console.log("headers: ", request.headers);
    // wss.clients.forEach(function each(client) {
    //     console.log(client.headers);
    // });

/*
    // Without streaming voice example
    var content;
    fs.readFile('angular/data/google.mp3', function read(err, data) {
        if (err) {
            throw err;
        }
        console.log(typeof data);
        content = data;
        ws.send(data);
    });
*/

    ws.on('message', function incoming(message) {
        // console.log("typeof message: ", typeof message);

        if ((typeof message) == 'string') {
            console.log("string message: ", message);
            if (message === "start stream") {
                // var audios = ['test1.mp3', "adnan.mp3", "anna.mp3"];
                var audios = ['airspeed.ogg','buypaperclips.ogg','buyprinterpaper.ogg', 'example.ogg'];
                var filename = audios[Math.floor(audios.length * Math.random())];
                console.log('filename: ', filename);
                var readStream = fs.createReadStream("angular/data/" + filename,
                    {
                        'flags': 'r',
                        'highWaterMark': 128 * 1024
                    }
                );
                readStream.on('data', function(data) {
                    // console.log(typeof data);
                    console.log('sending chunk of data' ,data);
                    ws.send(data);
                });

                readStream.on('end', function() {
                    console.log('sending end data');
                    ws.send('end');
                });

                readStream.on('error', function(err) {
                    console.log(err)
                });
            } else {
                // console.log("audioBuffer", audioBuffer);
                // ws.send(audioBuffer);
                // audioBuffer = new Buffer(0);
                // console.log("in audioBuffer", audioBuffer);

            }
        } else {
            console.log("not string: ", message);
            ws.send(message);
            // audioBuffer = Buffer.concat([audioBuffer, message]);
        }
    });

    ws.on('close', function closed() {
        console.log('socket closed');
    });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
